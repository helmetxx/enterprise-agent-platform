# 市场分析智能体 (Market Analysis Agent) 详细设计

## 1. Dify应用配置

### 1.1 基础配置
应用名称: 市场分析智能体
类型: Assistant
模型: GPT-4
用途: A3阶段市场分析

### 1.2 RAG配置
- 开启知识库功能
- 向量数据库: 使用Dify默认配置
- 分块大小: 800
- 重叠大小: 100
- 相似度阈值: 0.75
- 最大支持文件大小: 50MB
- 预置知识库: 行业报告、竞品资料

## 2. 提示词模板设计

### 2.1 系统提示词
SYSTEM_PROMPT = """你是一个专业的市场分析专家。你的主要职责是分析市场趋势、竞争态势和机会。

分析要求：
1. 基于文档和知识库进行深入市场分析
2. 识别关键市场趋势和发展方向
3. 评估竞争格局和主要玩家
4. 发现市场机会和潜在风险
5. 生成结构化的分析报告

分析维度：
1. 市场规模：市场容量和增长潜力
2. 竞争态势：主要竞争者分析
3. 用户需求：目标用户画像和需求
4. 技术趋势：相关技术发展方向
5. 商业模式：盈利模式和商业可行性

输出格式要求：
{
    "market_overview": {
        "market_size": {
            "current_size": "当前市场规模",
            "growth_rate": "增长率",
            "potential_size": "潜在规模"
        },
        "market_segments": [
            {
                "name": "细分市场名称",
                "size": "规模",
                "growth": "增长率",
                "key_players": ["主要玩家1", "主要玩家2"]
            }
        ]
    },
    "competitive_analysis": {
        "key_players": [
            {
                "name": "竞争者名称",
                "market_share": "市场份额",
                "strengths": ["优势1", "优势2"],
                "weaknesses": ["劣势1", "劣势2"]
            }
        ],
        "competition_intensity": "竞争强度评分(1-5)",
        "entry_barriers": ["进入壁垒1", "进入壁垒2"]
    },
    "user_analysis": {
        "user_segments": [
            {
                "segment": "用户群体",
                "characteristics": ["特征1", "特征2"],
                "needs": ["需求1", "需求2"],
                "pain_points": ["痛点1", "痛点2"]
            }
        ],
        "user_trends": ["趋势1", "趋势2"]
    },
    "opportunities_threats": {
        "opportunities": [
            {
                "description": "机会描述",
                "potential": "潜力评分(1-5)",
                "time_frame": "时间框架"
            }
        ],
        "threats": [
            {
                "description": "威胁描述",
                "severity": "严重程度(1-5)",
                "likelihood": "可能性(1-5)"
            }
        ]
    },
    "recommendations": [
        {
            "category": "建议类别",
            "content": "建议内容",
            "priority": "优先级(1-5)",
            "implementation_difficulty": "实施难度(1-5)"
        }
    ]
}
"""

### 2.2 用户提示词模板
USER_PROMPT_TEMPLATE = """
请基于以下内容进行市场分析：

文档内容：
{{context}}

分析要求：
1. 全面评估市场现状和趋势
2. 深入分析竞争态势
3. 识别市场机会和威胁
4. 提供具体的策略建议

请按照规定的JSON格式输出分析结果。
"""

### 2.3 跟进提示词模板
FOLLOW_UP_TEMPLATE = """
基于之前的市场分析结果，请针对以下方面进行深入分析：

关注领域：{{focus_area}}
补充信息：{{additional_context}}

请重点关注：
1. 新增市场信息的影响
2. 竞争态势的变化
3. 机会和威胁的更新
4. 策略建议的调整

请以增量更新的方式输出分析结果。
"""

## 3. 后端集成实现

### 3.1 基础服务类
class DifyMarketAnalysisAgent:
    def __init__(self, api_key: str):
        self.api_base = "https://api.dify.ai/v1"
        self.api_key = api_key
        self.app_id = "your_market_analysis_app_id"
        
    async def upload_market_data(self, files: List[str]) -> List[str]:
        """上传市场数据到Dify知识库"""
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "multipart/form-data"
            }
            
            file_ids = []
            for file_path in files:
                data = aiohttp.FormData()
                data.add_field('file', 
                             open(file_path, 'rb'),
                             filename=file_path.split('/')[-1])
                
                async with session.post(
                    f"{self.api_base}/knowledge-bases/{self.app_id}/files",
                    headers=headers,
                    data=data
                ) as response:
                    result = await response.json()
                    file_ids.append(result['id'])
                    
            return file_ids
            
    async def analyze_market(self, file_ids: List[str], previous_analysis: Optional[Dict] = None) -> Dict:
        """执行市场分析"""
        async with aiohttp.ClientSession() as session:
            headers = {
                "Authorization": f"Bearer {self.api_key}",
                "Content-Type": "application/json"
            }
            
            messages = [
                {
                    "role": "user",
                    "content": "请进行市场分析"
                }
            ]
            
            if previous_analysis:
                messages.append({
                    "role": "assistant",
                    "content": json.dumps(previous_analysis)
                })
            
            async with session.post(
                f"{self.api_base}/chat-messages",
                headers=headers,
                json={
                    "messages": messages,
                    "query": "分析市场状况",
                    "knowledge_base_ids": file_ids
                }
            ) as response:
                result = await response.json()
                return json.loads(result['answer'])

### 3.2 错误处理实现
class MarketAnalysisError(Enum):
    DATA_UPLOAD_FAILED = "DATA_UPLOAD_FAILED"
    ANALYSIS_TIMEOUT = "ANALYSIS_TIMEOUT"
    API_RATE_LIMIT = "API_RATE_LIMIT"
    MODEL_ERROR = "MODEL_ERROR"
    INVALID_RESPONSE = "INVALID_RESPONSE"
    KNOWLEDGE_BASE_ERROR = "KNOWLEDGE_BASE_ERROR"

class MarketAnalysisException(Exception):
    def __init__(self, error_type: MarketAnalysisError, message: str, details: Optional[Dict] = None):
        self.error_type = error_type
        self.message = message
        self.details = details
        self.timestamp = datetime.utcnow()
        super().__init__(self.message)

class MarketAnalysisErrorHandler:
    def __init__(self):
        self.retry_configs = {
            MarketAnalysisError.DATA_UPLOAD_FAILED: {"max_retries": 3, "delay": 5},
            MarketAnalysisError.API_RATE_LIMIT: {"max_retries": 5, "delay": 10},
            MarketAnalysisError.MODEL_ERROR: {"max_retries": 2, "delay": 15}
        }

    async def handle_error(self, error: MarketAnalysisException) -> Dict[str, Any]:
        """处理分析过程中的错误"""
        try:
            if error.error_type in self.retry_configs:
                return await self._handle_retryable_error(error)
            return await self._handle_non_retryable_error(error)
        except Exception as e:
            return {
                "status": "error",
                "error_type": str(error.error_type),
                "message": str(e),
                "timestamp": datetime.utcnow().isoformat()
            }

### 3.3 性能优化实现
class MarketAnalysisOptimizer:
    def __init__(self):
        self.redis_client = Redis(host='localhost', port=6379, db=1)
        self.batch_size = 3
        self.cache_ttl = 7200  # 2小时缓存
        
    async def optimize_analysis_process(self, data_files: List[str], background_tasks: BackgroundTasks) -> Dict[str, Any]:
        """优化市场分析流程"""
        
        # 1. 缓存检查
        cache_key = self._generate_cache_key(data_files)
        cached_result = await self._get_cached_result(cache_key)
        if cached_result:
            return cached_result
            
        # 2. 文件批处理
        file_batches = self._create_file_batches(data_files)
        
        # 3. 异步处理
        analysis_task = background_tasks.add_task(
            self._process_file_batches,
            file_batches,
            cache_key
        )
        
        return {
            "status": "processing",
            "task_id": str(analysis_task),
            "estimated_time": self._estimate_processing_time(data_files)
        }

## 4. API接口定义

### 4.1 市场数据上传接口
@app.post("/api/market-analysis/upload")
async def upload_market_data(
    files: List[UploadFile] = File(...),
    background_tasks: BackgroundTasks = None
):
    """上传市场数据接口"""
    try:
        # 保存上传的文件
        file_paths = []
        for file in files:
            file_path = f"temp/market/{file.filename}"
            with open(file_path, "wb") as buffer:
                content = await file.read()
                buffer.write(content)
            file_paths.append(file_path)
        
        # 初始化分析优化器
        optimizer = MarketAnalysisOptimizer()
        
        # 异步处理文件
        result = await optimizer.optimize_analysis_process(
            file_paths,
            background_tasks
        )
        
        return result
    except Exception as e:
        error_handler = MarketAnalysisErrorHandler()
        return await error_handler.handle_error(
            MarketAnalysisException(
                MarketAnalysisError.DATA_UPLOAD_FAILED,
                str(e)
            )
        )

### 4.2 获取分析结果接口
@app.get("/api/market-analysis/{task_id}")
async def get_market_analysis(task_id: str):
    """获取市场分析结果接口"""
    try:
        optimizer = MarketAnalysisOptimizer()
        result = await optimizer.get_task_result(task_id)
        return result
    except Exception as e:
        error_handler = MarketAnalysisErrorHandler()
        return await error_handler.handle_error(
            MarketAnalysisException(
                MarketAnalysisError.ANALYSIS_TIMEOUT,
                str(e)
            )
        )

## 5. 使用注意事项

### 5.1 数据处理限制
- 支持格式：PDF、Word、Excel、CSV、JSON
- 单文件大小：最大50MB
- 批量上传：单次最多5个文件
- 总大小限制：单次上传总大小不超过150MB

### 5.2 API调用限制
- 并发请求数：最大5个
- 调用频率：每分钟30次
- 超时设置：单次分析最长10分钟

### 5.3 错误处理建议
- 实现完整的错误重试机制
- 记录详细的错误日志
- 提供友好的错误提示
- 支持分析任务恢复

### 5.4 性能优化建议
- 使用数据哈希做缓存
- 实现异步分析队列
- 采用增量分析策略
- 定期更新知识库 